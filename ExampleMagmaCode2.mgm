// We define sets by enclosing a set of objects in {  }
A:={1,2,3,5,7};
B := { (-3)^2, (-2)^2, (-1)^2, 0^2, 1^2, 2^2, 3^2 };

// It is fairly straightforward to test membership
13 in A;
2*7 - 9 in A;
16 in B;

// We can also construct sets by iterating through a range of values.
// In the third version, we can specify a condition on the value k.
B2 := { k^2 : k in [-3..3] };
B3 := { k^2 : k in [-100..100] };
B4 := { k^2 : k in [-100..100] | IsPrime(k)   };

// Using {@    @} gives us an "Indexed" or ordered set
 O4 := {@  k^2 : k in [-100..100] | IsPrime(k) @};

// If we want a specified element of the set we can ask:
O4[1];
O4[3];

B4[1];
// Gives Error:
/*
>> B4[1];
     ^
Runtime error in '[]': Bad argument types
*/

// Finally we can ask for a Sequence using [     ]
// Notice that unlike the indexed set O4, S4 can contain repeated values.
S4 := [ k^2 : k in [-100..100] | IsPrime(k) ];
